<?xml version="1.0" encoding="utf-8"?>
<!--@POSTPROC: ./postproc.sh -->
<module suppressWarnings="true">

<Login f="nodata">
  <Login f="noscroll">
    <User_Name t="list" f="user" l="Control"/>
  </Login>
</Login>

<Control f="nodata">
  <Main>
    <Add_New_Survey_Unit t="button" l="Survey_Unit"/>
    <!--TODO: Add a helper to the autogen which allows saving of these in localsettings-->
    <Number_of_Rows    b="decimal"/>
    <Number_of_Walkers b="decimal"/>
  </Main>
  <search/>
  <Vars>
    <Highlighted_Row/>
    <Highlighted_Walker/>
  </Vars>
</Control>

<Survey_Unit>
  <Survey_Unit f="noscroll">
    <Survey_Unit_ID f="id"/>
    <Add_New_Walker_Unit lc="Walker_Unit" t="button"/>
    <Walker_Units        ec="Walker_Unit"/>
  </Survey_Unit>
  <Vars>
    <Number_of_Rows/>
    <Number_of_Walkers/>
  </Vars>
</Survey_Unit>

<Walker_Unit>
  <Walker_Unit>
    <Grid t="webview" f="nolabel"/>
    <cols>
      <group_tl t="group"/>
      <Up       t="button"/>
      <group_tr t="group"/>
    </cols>
    <cols>
      <Left     t="button"/>
      <Load     t="button"/>
      <Right    t="button"/>
    </cols>
    <cols>
      <group_bl t="group"/>
      <Down     t="button"/>
      <group_br t="group"/>
    </cols>
    <cols>
      <Row_ID    f="id" b="decimal"/>
      <Walker_ID f="id" b="decimal"/>
      <Property_1/>
    </cols>
  </Walker_Unit>
</Walker_Unit>

<logic><![CDATA[
  getGridHtml(
      Integer numberOfRows,   Integer numberOfWalkers,
      Integer highlightedRow, Integer highlightedWalker,
      Integer selectedRow,    Integer selectedWalker
  ) {
    // In a probably vain attempt to improve performance, this code is valid
    // HTML5.
    String html = "";

    html += "<!DOCTYPE html>";
    html += "<html>";
    html += "  <head>";
    html += "    <title>Grid</title>";
    html += "    <style>";
    html += "      table {";
    html += "        width: 100%;";
    html += "        border-collapse: collapse;";
    html += "      }";
    html += "      td {";
    html += "        background-color: #FFFFFF;";
    html += "        border: 1px solid #000000;";
    html += "      }";
    html += "      td.highlighted {";
    html += "        background-color: #DDDDDD !important;";
    html += "        color:            #000000 !important;";
    html += "      }";
    html += "      td.selected {";
    html += "        background-color: #000000;";
    html += "        color:            #FFFFFF;";
    html += "      }";
    html += "    </style>";
    html += "  </head>";
    html += "  <table>";

    for (i = 1; i <= numberOfRows; i++) {
      html += "<tr>";
      for (j = 1; j <= numberOfWalkers; j++) {
        Boolean isHighlighted = (i == highlightedRow && j == highlightedWalker);
        Boolean isSelected    = (i == selectedRow    && j == selectedWalker);

        String  cssClass = "";
        if (isHighlighted) cssClass += " highlighted";
        if (isSelected)    cssClass += " selected";

        String htmlRow = "";
        htmlRow += "<td class=\"{cssClass}\">";
        htmlRow += "Row {row}, Walker {walker}";
        htmlRow += "</td>";
        htmlRow  = replaceFirst(htmlRow, "{cssClass}", cssClass);
        htmlRow  = replaceFirst(htmlRow, "{row}",      i);
        htmlRow  = replaceFirst(htmlRow, "{walker}",   j);

        html += htmlRow;
      }
      html += "</tr>";
    }
    html += "  </table>";
    html += "</html>";

    return html;
  }

  getFieldValueAsInteger(String ref) {
    String  val          = getFieldValue(ref);
    Integer valAsInteger = 0;

    try {
      valAsInteger = Integer.valueOf(val);
    } catch (Exception e) { ; }

    return valAsInteger;
  }

  clip(Integer x, Integer min, Integer max) {
    if (x > max) return max;
    if (x < min) return min;
    return x;
  }

  numberOfRows() {
  String ref = "Control/Main/Number_of_Rows";
    return getFieldValueAsInteger(ref);
  }

  highlightedRow() {
    String  ref = "Control/Vars/Highlighted_Row";
    Integer val = getFieldValueAsInteger(ref);

    return clip(val, 1, numberOfRows());
  }

  highlightedRow(Integer val) {
    val = clip(val, 1, numberOfRows());

    String ref = "Control/Vars/Highlighted_Row";
    setFieldValue(ref, val.toString());
  }

  selectedRow() {
    String ref = "Walker_Unit/Walker_Unit/Row_ID";
    return getFieldValueAsInteger(ref);
  }

  numberOfWalkers() {
    String ref = "Control/Main/Number_of_Walkers";
    return getFieldValueAsInteger(ref);
  }

  highlightedWalker() {
    String  ref = "Control/Vars/Highlighted_Walker";
    Integer val = getFieldValueAsInteger(ref);

    return clip(val, 1, numberOfWalkers());
  }

  highlightedWalker(Integer val) {
    val = clip(val, 1, numberOfWalkers());

    String ref = "Control/Vars/Highlighted_Walker";
    setFieldValue(ref, val.toString());
  }

  selectedWalker() {
    String ref = "Walker_Unit/Walker_Unit/Walker_ID";
    return getFieldValueAsInteger(ref);
  }

  moveWalker(Integer delta) {
    highlightedWalker(highlightedWalker() + delta);
  }

  moveRow(Integer delta) {
    highlightedRow(highlightedRow() + delta);
  }

  redrawGrid() {
    String ref  = "Walker_Unit/Walker_Unit/Grid";
    String html = getGridHtml(
        numberOfRows(),   numberOfWalkers(),
        highlightedRow(), highlightedWalker(),
        selectedRow(),    selectedWalker()
    );
    populateWebViewHtml(ref, html);
  }

  gridUp()    { moveRow   (-1); redrawGrid(); }
  gridDown()  { moveRow   (+1); redrawGrid(); }
  gridLeft()  { moveWalker(-1); redrawGrid(); }
  gridRight() { moveWalker(+1); redrawGrid(); }

  onCreateSurveyUnit() {
    copyFieldValue(
      "Control/Main/Number_of_Rows",
      "Survey_Unit/Vars/Number_of_Rows",
      false
    );
    copyFieldValue(
      "Control/Main/Number_of_Walkers",
      "Survey_Unit/Vars/Number_of_Walkers",
      false
    );
  }

  onCreateWalkerUnit() {
    setFieldValue(
      "Walker_Unit/Walker_Unit/Row_ID",
      highlightedRow().toString()
    );
    setFieldValue(
      "Walker_Unit/Walker_Unit/Walker_ID",
      highlightedWalker().toString()
    );
  }

  onLoadWalkerUnit() {
    String childUuid = getUuid(parentTabgroup__);

    String q = "";
    q += " SELECT attributename, measure";
    q += "   FROM latestnondeletedaentvalue";
    q += "   JOIN attributekey USING (attributeid)";
    q += "   JOIN parentchild ON (uuid = childuuid)";
    q += "  WHERE attributename IN ('Number of Rows', 'Number of Walkers')";
    q += "    AND childuuid = '{childUuid}'";
    q  = replaceFirst(q, "{childUuid}", childUuid);

    FetchCallback updateGridDimsVars = new FetchCallback() {
      onFetch(result) {
        updateGridDimsVars(result);
      }
    };

    fetchAll(q, updateGridDimsVars);
  }

  updateGridDimsVars(result) {
    String refRows    = "Control/Main/Number_of_Rows";
    String refWalkers = "Control/Main/Number_of_Walkers";

    String attrNameRows    = getAttributeName(refRows);
    String attrNameWalkers = getAttributeName(refWalkers);

    if (result == null) return;
    for (row : result) {
      String attrName = row.get(0);
      String attrVal  = row.get(1);

      if (attrName.equals(attrNameRows   )) setFieldValue(refRows,    attrVal);
      if (attrName.equals(attrNameWalkers)) setFieldValue(refWalkers, attrVal);
    }
  }

  loadWalkerUnit() {
    String tabgroup   = "Walker_Unit";
    String parentUuid = getUuid(parentTabgroup__);
    String rowId      = highlightedRow()   .toString();
    String walkerId   = highlightedWalker().toString();

    // TODO: I think something's wrong with this query.
    // Finds the Walker Unit with a given Row ID and Walker ID which is the
    // child of a Survey Unit with a given UUID.
    String q = "";
    q += " SELECT uuid";
    q += "   FROM latestnondeletedaentvalue";
    q += "   JOIN attributekey using (attributeid)";
    q += "  WHERE measure = '{walkerId}'";
    q += "    AND attributename = 'Walker ID'";
    q += "    AND uuid IN (";
    q += "                 SELECT uuid";
    q += "                   FROM latestnondeletedaentvalue";
    q += "                   JOIN attributekey USING (attributeid)";
    q += "                   JOIN parentchild ON (uuid = childuuid)";
    q += "                  WHERE measure = '{rowId}'";
    q += "                    AND attributename = 'Row ID'";
    q += "                    AND parentuuid = '{parentUuid}'";
    q += "        );";
    q  = replaceFirst(q, "{rowId}",      rowId);
    q  = replaceFirst(q, "{walkerId}",   walkerId);
    q  = replaceFirst(q, "{parentUuid}", parentUuid);

    FetchCallback loadWalkerUnit = new FetchCallback() {
      onFetch(result) {
        cancelTabGroup(tabgroup, false);

        if (result == null || result.size() == 0) {
          showWarning("no " + parentTabgroup__, q);
          newWalkerUnit();
        } else {
          showWarning("yes " + parentTabgroup__, q);
          String uuid = result.get(0).get(0);
          loadWalkerUnitFrom(uuid);
        }
      }
    };

    fetchAll(q, loadWalkerUnit);
  }

  addOnEvent("Walker_Unit/Walker_Unit",       "show",  "redrawGrid    ()");
  addOnEvent("Walker_Unit/Walker_Unit/Up",    "click", "gridUp        ()");
  addOnEvent("Walker_Unit/Walker_Unit/Down",  "click", "gridDown      ()");
  addOnEvent("Walker_Unit/Walker_Unit/Left",  "click", "gridLeft      ()");
  addOnEvent("Walker_Unit/Walker_Unit/Right", "click", "gridRight     ()");
  addOnEvent("Walker_Unit/Walker_Unit/Load",  "click", "loadWalkerUnit()");
]]></logic>

</module>
