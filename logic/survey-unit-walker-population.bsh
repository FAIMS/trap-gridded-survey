/*********************** SURVEY UNIT WALKER POPULATION ************************/
/* Overrides the autogenerated function definition.
 *
 * `viewType`   the type of GUI element to be populated. It can either equal
 *              "DropDown" or "List".
 * `path`       the reference of the GUI element to be populated.
 * `parentUuid` the parent in the relationship denoted by `relType`.
 * `entType`    the type of the entities the menu will be populated with.
 * `relType`    the name of the relationship the children are to be in with the
 *              entity denoted by `parentUuid`.
 */
populateMenuWithEntities (
  String viewType,
  String path,
  String parentUuid,
  String entType,
  String relType
) {
  String getChildEntitiesQ;
  if (entType.equals("Walker")) {
    getChildEntitiesQ = "" +
      " SELECT childuuid, response" +
      "   FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers ON (childuuid = uuid)" +
      "   JOIN (SELECT uuid, CAST(measure AS INTEGER) AS position" +
      "       FROM latestnondeletedaentvalue " +
      "       JOIN attributekey using (attributeid)" +
      "       WHERE attributename = 'Walker Number') USING (uuid)" +
      "  WHERE relationshipid IN (SELECT relationshipid " +
      "                             FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)" +
      "                            WHERE relntypename = '"+relType+"')" +
      "   AND parentuuid = " + parentUuid + " " +
      "    AND (childaenttypename = '"+entType+"' OR '"+entType+"' = '')" +
      "  ORDER BY position ASC ";

  } else {
    getChildEntitiesQ = "" +
      "SELECT childuuid, response "+
      "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers ON (childuuid = uuid) " +
      "  JOIN createdmodifiedatby USING (uuid) " +
      " WHERE relationshipid IN (SELECT relationshipid  " +
      "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid) " +
      "                           WHERE relntypename = '"+relType+"') " +
      "   AND parentuuid = " + parentUuid + " " +
      "   AND (childaenttypename = '"+entType+"' OR '"+entType+"' = '') " +
      " ORDER BY parentchild.createdat DESC ";
  }

  String getEntitiesQ = "" +
    "SELECT uuid, response "+
    "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
    " WHERE uuid in (SELECT uuid "+
    "                  FROM latestNonDeletedArchEntIdentifiers "+
    "                 WHERE aenttypename = '"+entType+"' OR '"+entType+"' = '' " +
    "               )  "+
    " ORDER BY response ";

  String q = null;
  if (relType.equals("")) {
    q = getEntitiesQ;
  } else {
    q = getChildEntitiesQ;
  }

  FetchCallback cbPopulateDropDown = new FetchCallback() {
    onFetch(result) {
      populateDropDown(path, result, true);
    }
  };

  switch (viewType) {
    case "DropDown":
      fetchAll(q, cbPopulateDropDown);
      break;
    case "List":
      q += " LIMIT ? OFFSET ? ";
      populateCursorList(path, q, 25);
      break;
    default:
      Log.e("populateMenuWithEntities ", "Unexpected type '" + viewType + "'");
  }
}
