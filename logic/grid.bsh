/************************************ GRID ************************************/
/* Functions and variables related to the grid interface.                     */
/******************************************************************************/
// A mutex is required for `numberOfRows(int)` to handle users double-clicking
// the 'Add Row' and 'Delete Row' buttons.
MUTEX_WALKER_UNIT_ROWS = new Semaphore(1);

/******************************* GRID - CACHING *******************************/
// `GRID_CACHE` is a 2-d array. The first two dimensions are the rows and
// walkers, respectively. Each element accessed by an index, (row, walker),
// contains a map from `vocabname` to its value (either the measure or vocabid.
Map[][] GRID_CACHE = null;

// These two variables determine the size of the cache.
int GRID_MAX_WIDTH  = 20;
int GRID_MAX_HEIGHT = 25;

initGridCache() {
  GRID_CACHE = new HashMap[GRID_MAX_HEIGHT][GRID_MAX_WIDTH];

  // Update data about the user's interactions during this session
  for   (int i = 0; i < GRID_MAX_HEIGHT; i++) {
    for (int j = 0; j < GRID_MAX_WIDTH;  j++) {
      updateGridCache(i, j);
    }
  }
}

/* The grid is a 2-d array. The first two dimensions are the rows and walkers,
 * respectively. Each element accessed by an index, (row, walker), contains a
 * map of statistics. In other words, `GRID_CACHE.get(0).get(0)` is a Map.
 */
updateGridCache() {
  updateGridCache("redrawGrid()");
}

updateGridCache(String callback) {
  String parentTabGroup = "Survey_Unit";
  String parentUuid     = getUuid(parentTabGroup);

  String q = "";
  q += " select uuid, rowID, walkerID, attributename, coalesce(measure, vocabid)";
  q += " from latestnondeletedaentvalue join attributekey using (attributeid)";
  q += " join parentchild on (childuuid = uuid)";
  q += " join (select uuid, measure as walkerID, valuetimestamp as footimestamp";
  q += "     from latestnondeletedaentvalue";
  q += "     join attributekey using (attributeid)";
  q += "     where attributename = 'Walker ID') USING (uuid)";
  q += " join (select uuid, measure as rowID";
  q += "     from latestnondeletedaentvalue";
  q += "     join attributekey using (attributeid)";
  q += "     where attributename = 'Row ID') USING (uuid)";
  q += " where parentuuid = {parentUuid}";
  q += " and attributename in ('Modern', 'Ancient', 'N A')";
  q += " order by footimestamp, rowID, walkerID, attributename;";
  q  = replaceFirst(q, "{parentUuid}", parentUuid);

  FetchCallback updateGridCache = new FetchCallback() {
    onFetch(result) {
      updateGridCache(result);
      execute(callback);
    }
  };

  fetchAll(q, updateGridCache);
}

updateGridCache(Object result) {
  if (result == null) return;

  // Insert 'Walker Unit' data from database
  for (dbRow : result) {
    String       uuid =             dbRow.get(0) ;
    String     sRowId =             dbRow.get(1) ;
    int        iRowId = stringToInt(dbRow.get(1));
    String  sWalkerId =             dbRow.get(2) ;
    int     iWalkerId = stringToInt(dbRow.get(2));
    String attribName =             dbRow.get(3) ;
    String attribVal  =             dbRow.get(4) ;

    if (!isValidInt(   sRowId)) continue;
    if (!isValidInt(sWalkerId)) continue;
    if (   iRowId > numberOfRows   ()) continue;
    if (iWalkerId > numberOfWalkers()) continue;
    if (   iRowId < 1) continue;
    if (iWalkerId < 1) continue;

    updateGridCache(iRowId, iWalkerId, "UUID",     uuid     );
    updateGridCache(iRowId, iWalkerId, attribName, attribVal);
  }
}

// Updates the "pre-computed facts". Does not access the database.
updateGridCache(i, j) {
  updateGridCache(i, j, "", "");
}

updateGridCache(i, j, attribName, attribVal) {
  if (attribVal == null)
    return;
  if (GRID_CACHE == null)
    initGridCache();

  String attribNameNa       = "N A";
  String attribNameInitials = "Initials";

  String defaultInitials = "&mdash;";
  String defaultNa       = "N/A";
  String defaultAncient  = "0";
  String defaultModern   = "0";

  // 1. Get the  `cell` from `GRID_CACHE`.
  Map cell = GRID_CACHE[i][j];

  // 2. Pre-compute some useful facts.
  Boolean isHighlighted = false;
  Boolean isSelected    = false;
  Boolean isRowIndex    = (i >  0 && j == 0);
  Boolean isWalkerIndex = (i == 0 && j >  0);
  Boolean isSide        = (i == 0 || j == 0);
  Boolean isMain        = !isSide;
  Boolean isConfirmed   = isMain && (cell != null && cell.get("isConfirmed"))
                                 || attribName.equals("Ancient")
                                 || attribName.equals("Modern");
  Boolean isNa          = false;
  Boolean hasInitials   = false;
  // 2.1 Compute `isNa`
  if (cell != null && cell.get(attribNameNa) != null) {
    String oldVal = cell.get(attribNameNa);
    isNa = !isNull(oldVal);
  }
  if (attribName.equals(attribNameNa)) isNa = !isNull(attribVal);
  // 2.2 Compute `hasInitials`
  if (cell != null && cell.get(attribNameInitials) != null) {
    String oldVal = cell.get(attribNameInitials);
    hasInitials = !isNull(oldVal) && !oldVal.equals(defaultInitials);
  }
  if (attribName.equals(attribNameInitials)) hasInitials = !isNull(attribVal);
  // 2.3 Compute `isHighlighted`
  if (cell != null && cell.get("isHighlighted") != null) {
    Boolean oldVal = cell.get("isHighlighted");
    isHighlighted = oldVal;
  }
  if (attribName.equals("isHighlighted")) isHighlighted = attribVal;
  // 2.4 Compute `isSelected`
  if (cell != null && cell.get("isSelected") != null) {
    Boolean oldVal = cell.get("isSelected");
    isSelected = oldVal;
  }
  if (attribName.equals("isSelected")) isSelected = attribVal;
  // 2.5 Compute `isConfirmed`
  if (attribName.equals("isConfirmed")) isConfirmed = attribVal;

  // 3. If no `cell` could be retrieved in step 1, make one.
  if (cell == null) {
    //cell = Collections.synchronizedMap(new HashMap());
    cell = new HashMap();
    GRID_CACHE[i][j] = cell;
  }

  // 4. Put the (attribName, attribVal) pair.
  if (!isNull(attribName)) cell.put(attribName, attribVal);

  // 5. Put the facts which were pre-computed facts in step 2.
  String na       = "";
  String ancient  = "0";
  String modern   = "0";
  String initials = "&mdash;";
  if (isNa)        na       = "N/A";
  if (isConfirmed) ancient  = GRID_CACHE[i][j].get("Ancient");
  if (isConfirmed) modern   = GRID_CACHE[i][j].get("Modern");
  if (hasInitials) initials = GRID_CACHE[i][j].get("Initials");

  GRID_CACHE[i][j].put("Ancient"       , ancient      );
  GRID_CACHE[i][j].put("Initials"      , initials     );
  GRID_CACHE[i][j].put("Modern"        , modern       );
  GRID_CACHE[i][j].put("N A"           , na           );
  GRID_CACHE[i][j].put("hasInitials"   , hasInitials  );
  GRID_CACHE[i][j].put("isConfirmed"   , isConfirmed  );
  GRID_CACHE[i][j].put("isHighlighted" , isHighlighted);
  GRID_CACHE[i][j].put("isMain"        , isMain       );
  GRID_CACHE[i][j].put("isNa"          , isNa         );
  GRID_CACHE[i][j].put("isRowIndex"    , isRowIndex   );
  GRID_CACHE[i][j].put("isSelected"    , isSelected   );
  GRID_CACHE[i][j].put("isSide"        , isSide       );
  GRID_CACHE[i][j].put("isWalkerIndex" , isWalkerIndex);
}

deselectAll() {
  int I = -1 + GRID_MAX_HEIGHT;
  int J = -1 + GRID_MAX_WIDTH;
  deselectAll(I, J);
}

unhighlightAll() {
  int I = -1 + GRID_MAX_HEIGHT;
  int J = -1 + GRID_MAX_WIDTH;
  unhighlightAll(I, J);
}

deselectAll   (int I, int J) { setGridInRange(I, J, "isSelected",    false); }
unhighlightAll(int I, int J) { setGridInRange(I, J, "isHighlighted", false); }

setGridInRange(int I, int J, attribName, attribVal) {
  if (GRID_CACHE == null) return;
  for   (int i = 0; i <= I; i++)
    for (int j = 0; j <= J; j++)
      GRID_CACHE[i][j].put(attribName, attribVal);
}

updateGridCacheNa() {
  String ref = "Walker_Unit/Walker_Unit/N_A";
  List   val = getFieldValue(ref);

  String attribName = "N A";
  String attribVal;
  if (val.isEmpty()) attribVal = "";
  else               attribVal = "N/A";

  updateGridCache(selectedRow(), selectedWalker(), attribName, attribVal);
}

updateGridCacheAncient() {
  String ref = "Walker_Unit/Walker_Unit/Ancient";
  String val = getFieldValue(ref);

  String attribName = "Ancient";
  String attribVal  = val;

  updateGridCache(selectedRow(), selectedWalker(), attribName, attribVal);
}

updateGridCacheModern() {
  String ref = "Walker_Unit/Walker_Unit/Modern";
  String val = getFieldValue(ref);

  String attribName = "Modern";
  String attribVal  = val;

  updateGridCache(selectedRow(), selectedWalker(), attribName, attribVal);
}

updateGridWalkers() {
  String parentUuid = getUuid("Survey_Unit");

  String q = "";
  q += " SELECT walkerID, initials";
  q += "         FROM (SELECT uuid, measure AS initials";
  q += "                 FROM parentchild";
  q += "                 JOIN latestnondeletedaentvalue on (childuuid = uuid)";
  q += "                 JOIN attributekey USING (attributeid)";
  q += "                WHERE parentuuid = {parentUuid}";
  q += "                  AND attributename IN ('Initials'))";
  q += "         JOIN (SELECT uuid, measure AS walkerID";
  q += "                 FROM parentchild";
  q += "                 JOIN latestnondeletedaentvalue on (childuuid = uuid)";
  q += "                 JOIN attributekey USING (attributeid)";
  q += "                WHERE parentuuid = {parentUuid}";
  q += "                  AND attributename IN ('Walker ID')) USING (uuid);";
  q  = replaceFirst(q, "{parentUuid}", parentUuid);
  q  = replaceFirst(q, "{parentUuid}", parentUuid);

  FetchCallback updateGridWalkers = new FetchCallback() {
    onFetch(result) {
      updateGridWalkers(result);
      redrawGrid();
    }
  };

  fetchAll(q, updateGridWalkers);
}

updateGridWalkers(Object result) {
  // 1. Clear walkers
  for (int i = 0; i < GRID_MAX_WIDTH; i++) {
    updateGridCache(0, i, "Initials", "");
  }

  // 2. Insert new walkers
  for (dbRow : result) {
    String sWalkerId =             dbRow.get(0);
    int    iWalkerId = stringToInt(dbRow.get(0));
    String initials  =             dbRow.get(1);

    updateGridCache(0, iWalkerId, "Initials", initials);
  }
}

/******************************* GRID - DRAWING *******************************/
redrawGrid() {
  redrawGrid(false);
}

redrawGrid(Boolean doRefreshCache) {
  if (doRefreshCache) {
    updateGridCache("redrawGrid()");
    showWarning("", "Updating");
    return;
  }
  showWarning("", "Redrawing");
  if (GRID_CACHE == null) {
    return;
  }

  int    numberOfRows    = numberOfRows();
  int    numberOfWalkers = numberOfWalkers();
  String refGridWebView  = "Walker_Unit/Walker_Unit/Grid";

  // In a probably vain attempt to improve performance, this code is valid
  // HTML5.
  String html = "";

  html += "<!DOCTYPE html>";
  html += "<html>";
  html += "  <head>";
  html += "    <title>Grid</title>";
  html += "    <style>";
  html += "      table {";
  html += "        table-layout: fixed;";
  html += "        border-collapse: separate;";
  html += "        border-spacing:  0px;";
  html += "        width: 100%;";
  html += "      }";
  html += "      td {";
  html += "        border: 1px solid #000000;";
  html += "        font-weight: 100;";
  html += "        padding: 3px;";
  html += "        text-align: center;";
  html += "      }";
  html += "      td.highlighted {";
  html += "        background-color: #CCCCCC;";
  html += "        border:  3px double #000000;";
  html += "        padding: 0px;";
  html += "      }";
  html += "      td.selected {";
  html += "        background-color: #00AA00;";
  html += "        color:            #FFFFFF;";
  html += "      }";
  html += "      td.row-index {";
  html += "        white-space:nowrap;";
  html += "        width: 20px;";
  html += "      }";
  html += "      td.side {";
  html += "        border: none;";
  html += "      }";
  html += "      td.confirmed {";
  html += "        text-shadow: 1px 0px #000;";
  html += "        font-weight: 900;";
  html += "      }";
  html += "    </style>";
  html += "  </head>";
  html += "  <table>";

  for (int i = numberOfRows; i >= 0; i--) {
    html += "    <tr>";
    for (int j = 0; j <= numberOfWalkers; j++) {
      Boolean isHighlighted = GRID_CACHE[i][j].get("isHighlighted");
      Boolean isSelected    = GRID_CACHE[i][j].get("isSelected");
      Boolean isRowIndex    = GRID_CACHE[i][j].get("isRowIndex");
      Boolean isWalkerIndex = GRID_CACHE[i][j].get("isWalkerIndex");
      Boolean isSide        = GRID_CACHE[i][j].get("isSide");
      Boolean isMain        = GRID_CACHE[i][j].get("isMain");
      Boolean isConfirmed   = GRID_CACHE[i][j].get("isConfirmed");
      Boolean isNa          = GRID_CACHE[i][j].get("isNa");
      Boolean hasInitials   = GRID_CACHE[i][j].get("hasInitials");

      // Build the string of CSS classes to apply to this <td> element
      String  cssClass = "";
      if (isHighlighted) cssClass += " highlighted";
      if (isSelected   ) cssClass += " selected";
      if (isRowIndex   ) cssClass += " row-index";
      if (isSide       ) cssClass += " side";
      if (isConfirmed  ) cssClass += " confirmed";

      // Get the <td> values ('Modern', 'Ancient', 'N/A', ...?)
      na       = GRID_CACHE[i][j].get("N A");
      ancient  = GRID_CACHE[i][j].get("Ancient");
      modern   = GRID_CACHE[i][j].get("Modern");
      initials = GRID_CACHE[i][j].get("Initials");

      // Build the HTML string for this <td>
      String htmlCell = "";
      htmlCell += "      <td class=\"{cssClass}\">";
      if (isRowIndex     ) htmlCell += i;
      if (isWalkerIndex  ) htmlCell += initials;
      if (isMain &&  isNa) htmlCell += na;
      if (isMain && !isNa) htmlCell += "<sup>{anc}</sup>/<sub>{mod}</sub>";
      htmlCell  = replaceFirst(htmlCell, "{cssClass}", cssClass);
      htmlCell  = replaceFirst(htmlCell, "{anc}",      ancient );
      htmlCell  = replaceFirst(htmlCell, "{mod}",      modern  );
      htmlCell += "      </td>";

      // Add the cell to the existing HTML
      html += htmlCell;
    }
    html += "    </tr>";
  }
  html += "  </table>";
  html += "</html>";

  // Now that the html string has been built, we can populate the web view
  populateWebViewHtml(refGridWebView, html);
}

redrawGridNa()      { updateGridCacheNa();      redrawGrid(); }
redrawGridAncient() { updateGridCacheAncient(); redrawGrid(); }
redrawGridModern()  { updateGridCacheModern();  redrawGrid(); }

numberOfRows() {
  String ref = "Survey_Unit/Vars/Number_of_Rows";
  int    val = getFieldValueAsInt(ref);

  return clip(val, 0, GRID_MAX_HEIGHT);
}

/* It is assumed that this function is only ever called while "Walker_Unit" is
 * displayed.
 */
numberOfRows(int val) {
  numberOfRows(val, "");
}

numberOfRows(int val, String callback) {
  val = clip(val, 1, GRID_MAX_HEIGHT);

  String  refRows           = "Survey_Unit/Vars/Number_of_Rows";
  String  parentTabGroup    = getTabGroupRef(refRows);
  String  parentUuid        = getUuid       (parentTabGroup);
  String  parentArchEntType = getArchEntType(parentTabGroup);
  String  attrName          = getAttributeName(refRows);
  String  numberOfRows      = String.valueOf(val);
  List    geometry          = null;
  List    attributes        = createAttributeList();
  Boolean doLoadWalkerUnit  = selectedRow() > val;

  if (!getDisplayedTabGroup().equals("Walker_Unit"))
    return;

  if (!MUTEX_WALKER_UNIT_ROWS.tryAcquire())
    return;

  // 1. If getPreviousTabGroup() == parentTabGroup, the user will visit it
  //    when they hit the back button. In this case, the value saved in the db
  //    must be made consistent with the one in the UI.
  if (getPreviousTabGroup().equals(parentTabGroup)) {
    setFieldValue(refRows, numberOfRows);
  }

  // 2. Update 'Number of Rows' using saveArchEnt
  SaveCallback release = new SaveCallback() {
    onSave(uuid, newRecord) {
      if (!doLoadWalkerUnit) {
        // Only execute callback if we don't be doing step 4.
        execute(callback);
      }
      MUTEX_WALKER_UNIT_ROWS.release();
    }
  };

  Object a = createEntityAttribute(attrName, null, null, numberOfRows, null);
  attributes.add(a);

  saveArchEnt(parentUuid, parentArchEntType, geometry, attributes, release);

  // 3. If the cursor (i.e. `highlightedRow()`) has changed, the entity under-
  //    neath it should be loaded.
  if (doLoadWalkerUnit) {
    highlightedWalker(selectedWalker());
    loadWalkerUnit(callback);
  }
}

highlightedRow() {
  String ref = "Survey_Unit/Vars/Highlighted_Row";
  int    val = getFieldValueAsInt(ref);

  return clip(val, 1, numberOfRows());
}

highlightedRow(int newVal) {
  String ref = "Survey_Unit/Vars/Highlighted_Row";
  int    highlightedWalker = highlightedWalker();

  int    iOldVal  = highlightedRow();

  int    iNewVal = clip(newVal, 1, numberOfRows());
  String sNewVal = String.valueOf(iNewVal);

  setFieldValue(ref, sNewVal);

  unhighlightAll();
  updateGridCache(iNewVal, highlightedWalker, "isHighlighted", true);
}

selectedRow() {
  String ref = "Walker_Unit/Vars/Row_ID";
  int    val = getFieldValueAsInt(ref);

  return max(1, val);
}

numberOfWalkers() {
  String ref = "Survey_Unit/Vars/Number_of_Walkers";
  int    val = getFieldValueAsInt(ref);

  return clip(val, 0, GRID_MAX_WIDTH);
}

highlightedWalker() {
  String ref = "Survey_Unit/Vars/Highlighted_Walker";
  int    val = getFieldValueAsInt(ref);

  return clip(val, 1, numberOfWalkers());
}

highlightedWalker(int newVal) {
  String ref    = "Survey_Unit/Vars/Highlighted_Walker";
  int    highlightedRow = highlightedRow();

  int    iOldVal = highlightedWalker();

  int    iNewVal = clip(newVal, 1, numberOfWalkers());
  String sNewVal = String.valueOf(iNewVal);

  setFieldValue(ref, sNewVal);

  unhighlightAll();
  updateGridCache(highlightedRow, iNewVal, "isHighlighted", true);
}

selectedWalker() {
  String ref = "Walker_Unit/Vars/Walker_ID";
  int    val = getFieldValueAsInt(ref);

  return max(1, val);
}

moveHighlightedWalker(int delta) {
  int numberOfWalkers   = numberOfWalkers  ();
  int highlightedWalker = highlightedWalker();

  int update = mod(
      (highlightedWalker - 1) + delta,
      numberOfWalkers
  ) + 1;

  highlightedWalker(update);
}

moveHighlightedRow(int delta) {
  int numberOfRows   = numberOfRows  ();
  int highlightedRow = highlightedRow();

  int update = mod(
      (highlightedRow - 1) + delta,
      numberOfRows
  ) + 1;

  highlightedRow(update);
}

initHighlighted() {
  highlightedRow   (1);
  highlightedWalker(1);
}

gridUp   () { moveHighlightedRow   (+1); redrawGrid(); }
gridDown () { moveHighlightedRow   (-1); redrawGrid(); }
gridLeft () { moveHighlightedWalker(-1); redrawGrid(); }
gridRight() { moveHighlightedWalker(+1); redrawGrid(); }
gridRandomAccessWalker() {
  String ref      = "Walker_Unit/Walker_Unit/Load_Walker";
  int    walkerId = getFieldValueAsInt(ref);

  highlightedWalker(walkerId);
  loadWalkerUnit();
}

/******************************** ROW ZEROING *********************************/
// A queue of the 'Walker Unit' entities which require creation and
// initialisation to zero.
WALKER_UNITS_TO_ZERO      = new LinkedBlockingQueue();

// A lock on the `WALKER_UNITS_TO_ZERO` variable.
MUTEX_DEQUEUE_WAKER_UNITS = new Semaphore(1);

// TODO: This needs to be called only once the 'Walker Unit' tab group is
//       finished saving.
zeroRowAndNext() {
  int numberOfWalkers = numberOfWalkers();
  int selectedWalker  = selectedWalker();
  int selectedRow     = selectedRow();

  Set unsavedWalkerIds = new TreeSet();

  // Populate `unsavedWalkerIds`
  for (int i = 1; i <= numberOfWalkers(); i++) {
    // We take "isConfirmed" to be synonymous with "is saved".
    Boolean isConfirmed = GRID_CACHE[selectedRow][i].get("isConfirmed");
    if (isConfirmed != null && isConfirmed == true) continue;

    String walkerId = String.valueOf(i);
    unsavedWalkerIds.add(walkerId);
  }
  // We must accommodate for the fact that the currently displayed Walker Unit
  // will be saved when it is navigated away from.
  unsavedWalkerIds.remove(selectedWalker + "");

  // Enqueue "Walker Unit" records which were previously unsaved
  rowId = String.valueOf(selectedRow);
  for (String walkerId : unsavedWalkerIds) {
    String parentUuid = getUuid("Survey_Unit");

    // Pack fields
    List walkerUnitToZero = new ArrayList();
    walkerUnitToZero.add(parentUuid);
    walkerUnitToZero.add(     rowId);
    walkerUnitToZero.add(  walkerId);

    // Enque packed fields
    WALKER_UNITS_TO_ZERO.put(walkerUnitToZero);
  }
  // Start saving them, one at a time.
  dequeWalkerUnitsToZero();
}


/* Create 'Walker Unit' records listed in `WALKER_UNITS_TO_ZERO`.
 *
 * Notice that this function is essentially composed of two:
 *
 *   - `dequeWalkerUnitsToZero()`    --- Non-recursive part
 *   - `dequeWalkerUnitsToZeroRec()` --- Recursive part
 *
 * The function is written this way to help coordinate locking behaviour. This
 * function's uses `MUTEX_DEQUEUE_WAKER_UNITS` to lock `WALKER_UNITS_TO_ZERO`.
 */
dequeWalkerUnitsToZero() {
  if (MUTEX_DEQUEUE_WAKER_UNITS.drainPermits() == 0) {
    return;
  }

  showTabGroup("Saving");

  dequeWalkerUnitsToZeroRec();
}

dequeWalkerUnitsToZeroRec() {
  if (WALKER_UNITS_TO_ZERO.size() == 0) {
    MUTEX_DEQUEUE_WAKER_UNITS.release();

    Boolean doWarn = false;
    cancelTabGroup("Saving", doWarn);

    nextRow();

    return;
  }

  populateWebViewHtml("Saving/Saving/Saving", getSavingHtml());

  List walkerUnitToZero = WALKER_UNITS_TO_ZERO.take();

  // Unpack fields from queue
  String parentUuid   =             walkerUnitToZero.get(0); // Survey Unit UUID
  String     sRowId   =             walkerUnitToZero.get(1);
  int        iRowId   = stringToInt(walkerUnitToZero.get(1));
  String  sWalkerId   =             walkerUnitToZero.get(2);
  int     iWalkerId   = stringToInt(walkerUnitToZero.get(2));
  // Prepare other fields which are required to perform a save
  String uuid         = null;
  String entityType   = "Walker Unit";
  List   geometry     = null;
  List   attributes   = createZeroedAttributeList(sRowId, sWalkerId);
  SaveCallback relate = new SaveCallback() {
    onSave(uuid, newRecord) {
      saveEntitiesToHierRel(
        "Survey Unit - Walker Unit",
        parentUuid,
        uuid,
        "Parent Of",
        "Child Of",
        "dequeWalkerUnitsToZeroRec()" // Beware pitfalls! Recursive call here!
      );
    }
  };

  // Save 'Walker Unit'. This should create a new record as opposed to
  // overwriting an existing one.
  saveArchEnt(uuid, entityType, geometry, attributes, relate);
  updateGridCache(iRowId, iWalkerId, "isConfirmed", true);
}

getSavingHtml() {
  String html = "";

  html += "<!DOCTYPE html>";
  html += "<html>";
  html += "  <head><title>Saving...</title></head>";
  html += "  <p>";
  html += "    <b>Please do not leave this tab group.</b>";
  html += "    The following Walker Unit records are saving:";
  html += "  </p>";
  html += "  <ul>";
  html += getSavingHtmlLis();
  html += "  </ul>";
  html += "  <p>";
  html += "    This list will update automatically as each record is saved.";
  html += "  </p>";
  html += "  <p>You will be returned to the previous tab group shortly.</p>";
  html += "</html>";

  return html;
}

getSavingHtmlLis() {
  // Copy Queue object to avoid blocking
  LinkedBlockingQueue walkerUnitsToZero;
  synchronized (WALKER_UNITS_TO_ZERO) {
    walkerUnitsToZero = new LinkedBlockingQueue(WALKER_UNITS_TO_ZERO);
  }

  String html = "";
  while(!walkerUnitsToZero.isEmpty()) {
    List walkerUnitToZero = walkerUnitsToZero.take();

    // Unpack values from `walkerUnitToZero`
    String    rowId = walkerUnitToZero.get(1);
    String walkerId = walkerUnitToZero.get(2);

    // Build the <li> string
    String fmtHtmlLi = "<li>Row %s, Walker %s</li>";
    String    htmlLi = replaceFirst(fmtHtmlLi,    rowId);
              htmlLi = replaceFirst(   htmlLi, walkerId);

    // Append the <li> string
    html += htmlLi;
  }

  return html;
}

nextRow() {
  if (selectedRow() == numberOfRows()) {
    numberOfRows(numberOfRows() + 1, "nextRow()");
  } else {
    highlightedWalker(1);
    highlightedRow   (1+selectedRow());

    loadWalkerUnit();
  }
}

nextWalkerUnit () {
  if (highlightedWalker() == numberOfWalkers()) {
    nextRow();
  } else {
    highlightedRow   (  selectedRow   ());
    highlightedWalker(1+selectedWalker());

    loadWalkerUnit();
  }
}

addRow   () { numberOfRows(numberOfRows() + 1, "redrawGrid()"); }
deleteRow() { numberOfRows(numberOfRows() - 1, "redrawGrid()"); }

getZeroableRefs() {
  List   elemNames = new ArrayList(); // names of zeroable elements
  List   refs      = new ArrayList(); // references of zeroable elements
  String fmtRef    = "Walker_Unit/Walker_Unit/%s";

  // 1. Write the element names
  elemNames.add("Ancient");
  elemNames.add("Modern");
  elemNames.add("A_C");
  elemNames.add("Daub");
  elemNames.add("HM");
  elemNames.add("Lithic");
  elemNames.add("Glass");
  elemNames.add("Other");

  // 2. Format the element names into refs
  for (e : elemNames) {
    String ref = replaceFirst(fmtRef, e);
    refs.add(ref);
  }

  return refs;
}

createZeroedAttributeList(String rowId, String walkerId) {
  List attribs = createAttributeList();

  String cert = "1.0"; // Certainty, having the default value of 1.0

  // Set 'Walker ID' and 'Row ID' to given values
  attribs.add(createEntityAttribute("Walker ID", null, null, walkerId, cert));
  attribs.add(createEntityAttribute("Row ID",    null, null, rowId,    cert));

  // Set zeroable properties to zero
  for (String ref : getZeroableRefs()) {
    String attribName = getAttributeName(ref);
    attribs.add(createEntityAttribute(attribName, null, null, "0", cert));
  }

  return attribs;
}

zeroIfBlank() {
  for (ref : getZeroableRefs()) {
    zeroIfBlank(ref);
  }
}

zeroIfBlank(String ref) {
  String blank = "";
  String zero  = "0";
  String val   = getFieldValue(ref);
  if (blank.equals(val)) {
    setFieldValue(ref, zero);
  }
}

blankIfZero(String ref) {
  String blank = "";
  String zero  = "0";
  String val   = getFieldValue(ref);
  if (zero.equals(val)) {
    setFieldValue(ref, blank);
  }
}

rowInterval() {
  String ref = "Survey_Unit/Vars/Row_Interval";
  return getFieldValueAsFloat(ref);
}

for (ref : getZeroableRefs()) {
  String focus = "blankIfZero(\"%s\")"; focus = replaceFirst(focus, ref);
  String blur  = "zeroIfBlank(\"%s\")"; blur  = replaceFirst(blur,  ref);

  addOnEvent(ref, "focus", focus);
  addOnEvent(ref, "blur",  blur );
}

/********************************** LOADING ***********************************/
/* This function is intended to be called from either the "Walker_Unit" or
 * "Survey_Unit" tab group.
 */
loadWalkerUnit() {
  loadWalkerUnit("redrawGrid()");
}

loadWalkerUnit(String callback) {
  int highlightedRow    = highlightedRow   ();
  int highlightedWalker = highlightedWalker();
  int    selectedRow    = selectedRow   ();
  int    selectedWalker = selectedWalker();

  String tabgroup   = "Walker_Unit";
  String childUuid  = getUuid(tabgroup);
  String parentUuid = getUuid(parentTabgroup__);
  String rowId      = String.valueOf(highlightedRow);
  String walkerId   = String.valueOf(highlightedWalker);

  // The selected walker unit is already loaded
  if (
      getDisplayedTabGroup().equals(tabgroup) &&
      highlightedRow    == selectedRow        &&
      highlightedWalker == selectedWalker
  ) {
    saveWalkerUnit(); // TODO: This should happen every time the load/save button is pressed. There should be a callback to leave the cell if needed.
    return;
  }

  // 1. An "blur" event will not be triggered by the following steps. We
  //    must zero-out all blank fields manually.
  zeroIfBlank();

  // 2. Update grid cache
  deselectAll();
  updateGridCache(highlightedRow, highlightedWalker, "isSelected",  true );

  // 3. Leave "Walker_Unit".
  if (getDisplayedTabGroup().equals(tabgroup))
    cancelTabGroup(tabgroup, false);

  // 4. Restore the highlighted cell.
  highlightedRow   (highlightedRow   );
  highlightedWalker(highlightedWalker);

  // 5. Re-enter "Walker_Unit" with the desired record loaded.
  String uuid = GRID_CACHE[highlightedRow][highlightedWalker].get("UUID");
  if (uuid == null) {
    parentTabgroup = "Survey_Unit";
    newWalkerUnit();
  } else {
    loadWalkerUnitFrom(uuid);
  }

  // 6. Gotta do that callback
  execute(callback);
}

// Overrides autogen's definition
loadWalkerUnitFrom(String uuid) {
  if (!isDisplayed("Survey_Unit")) {
    String head = "";
    String body = "";

    head  = "Walker Unit Could Not Be Loaded";
    body  = "'Walker Unit' records must be loaded from the 'Survey Unit' tab";
    body += " group";

    showWarning(head, body);
    return;
  }

  String tabgroup = "Walker_Unit";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      onFetchWalkerUnit__();
    }
  };

  showTabGroup(tabgroup, uuid, cb);
}

/*********************************** SAVING ***********************************/
MUTEX_WALKER_UNIT_SAVE = new Semaphore(1);

// Overrides autogen's definition. Disables autosaving.
onShowWalkerUnit() {
  return;
}

saveWalkerUnit() {
  if (MUTEX_WALKER_UNIT_SAVE.drainPermits() == 0) {
    showToast("Still Saving...");
    return;
  }

  String  tabgroup            = "Walker_Unit";
  Boolean enableAutosave      = false;
  String  id                  = getUuid(tabgroup);
  List    geometry            = null;
  List    attributes          = null;
  String  parentTabgroup_     = parentTabgroup;
  String  parentTabgroupUuid_ = getUuid(parentTabgroup_);
  Boolean userWasSet          = !username.equals("");
  String  callback            = "onSaveWalkerUnit__()";

  // Callback to update grid cache
  int     i_i                 =      selectedRow();
  int     i_j                 =      selectedWalker();
  String  s_i                 = "" + selectedRow();
  String  s_j                 = "" + selectedWalker();
  String  callbackConfirm     = "confirmWalkerUnit(%s, %s)";
          callbackConfirm     = replaceFirst(callbackConfirm, s_i);
          callbackConfirm     = replaceFirst(callbackConfirm, s_j);

  // Callback to release mutex
  String  callbackRelease     = "MUTEX_WALKER_UNIT_SAVE.release()";

  // Callback to repopulate child entity list
  String repopulateEntityList;
  repopulateEntityList = "populateEntityListsInTabGroup(\"{tabGroup}\")";
  repopulateEntityList = replaceFirst(repopulateEntityList, "{tabGroup}", parentTabgroup__);

  // Put all the callbacks together
  callback = callbackConfirm      + ";" +
             callbackRelease      + ";" +
             repopulateEntityList + ";" +
             callback;

  parentTabgroup = null;

  SaveCallback saveCallback  = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      updateGridCache(i_i, i_j, "UUID", uuid);

      // Make a child-parent relationship if need be.
      if (
          newRecord &&
          !isNull(parentTabgroup_) &&
          !isNull(parentTabgroupUuid_)
      ) {
        String rel = "";
        rel += parentTabgroup_.replaceAll("_", " ");
        rel += " - ";
        rel += tabgroup.replaceAll("_", " ");
        saveEntitiesToHierRel(
          rel,
          parentTabgroupUuid_,
          uuid,
          "Parent Of",
          "Child Of",
          callback
        );
      } else {
        execute(callback);
      }
    }
    onError(message) {
      showToast(message);
    }
  };

  saveTabGroup(tabgroup, id, geometry, attributes, saveCallback, enableAutosave);
}

confirmWalkerUnit(int i, int j) {
  updateGridCache(i, j, "isConfirmed", true);
}

onSaveWalkerUnit() {
  showWarning("", "save");

  redrawGrid();
}

addOnEvent("Walker_Unit", "save", "onSaveWalkerUnit()");

/**************************** MISC EVENT HANDLERS *****************************/
inheritSurveyUnitFields() {
  copyFieldValue(
    "Control/Main/Number_of_Rows",
    "Survey_Unit/Vars/Number_of_Rows",
    false
  );
  copyFieldValue(
    "Control/Main/Number_of_Walkers",
    "Survey_Unit/Vars/Number_of_Walkers",
    false
  );
  copyFieldValue(
    "Control/Main/Row_Interval",
    "Survey_Unit/Vars/Row_Interval",
    false
  );
  copyFieldValue(
    "Control/Main/Walker_Interval",
    "Survey_Unit/Vars/Walker_Interval",
    false
  );
}

onCreateSurveyUnit() {
  inheritSurveyUnitFields();
}

inheritWalkerUnitFields() {
  setFieldValue(
    "Walker_Unit/Vars/Row_ID",
    String.valueOf(highlightedRow())
  );
  setFieldValue(
    "Walker_Unit/Vars/Walker_ID",
    String.valueOf(highlightedWalker())
  );
}

populateWalkerRadioGroup () {
  int    numberOfWalkers = numberOfWalkers();
  String selectedWalker  = String.valueOf(selectedWalker());
  String refWalker       = "Walker_Unit/Walker_Unit/Load_Walker";

  List walkerIds = new ArrayList();
  for (int i = 1; i <= numberOfWalkers; i++ ) {
    String s_i = String.valueOf(i);
    walkerIds.add(new NameValuePair(s_i, s_i));
  }

  populateRadioGroup(refWalker, walkerIds);
}

onCreateWalkerUnit() {
  inheritWalkerUnitFields();
  zeroIfBlank();
}

// Overrides autogen's definition
onClickSurveyUnitAddNewWalkerUnit () {
  String tabgroup = "Survey_Unit";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  loadWalkerUnit();
}

onClickNextSurveyUnit() {
  cancelTabGroup("Walker_Unit", false);
  cancelTabGroup("Survey_Unit", false);

  onClickControlAddNewSurveyUnit();
  onClickSurveyUnitAddNewWalkerUnit(); // TODO: Refactor the autogened code so
                                       // that it saves the parent before
                                       // entering the child tab group.
}

/******************************* EVENT BINDINGS *******************************/
addOnEvent("Walker_Unit/Walker_Unit/Zero_Row_And_Next_1", "click", "zeroRowAndNext()");
addOnEvent("Walker_Unit/Walker_Unit/Zero_Row_And_Next_2", "click", "zeroRowAndNext()");

addOnEvent("Walker_Unit/Walker_Unit/Next_Walker_Unit_1",    "click", "nextWalkerUnit()");
addOnEvent("Walker_Unit/Walker_Unit/Next_Walker_Unit_2",    "click", "nextWalkerUnit()");

addOnEvent("Walker_Unit/Walker_Unit/Delete_Row", "click",  "deleteRow()");

addOnEvent("Walker_Unit/Walker_Unit/Up",          "click",  "gridUp()");
addOnEvent("Walker_Unit/Walker_Unit/Down",        "click",  "gridDown()");
addOnEvent("Walker_Unit/Walker_Unit/Left",        "click",  "gridLeft()");
addOnEvent("Walker_Unit/Walker_Unit/Right",       "click",  "gridRight()");
addOnEvent("Walker_Unit/Walker_Unit/Load_Walker", "click",  "gridRandomAccessWalker()");

addOnEvent("Walker_Unit/Walker_Unit/Load",       "click",  "loadWalkerUnit()");

addOnEvent("Walker_Unit",                        "show", "populateWalkerRadioGroup()");
addOnEvent("Walker_Unit",                        "create", "onCreateWalkerUnit()");
addOnEvent("Walker_Unit",                        "leave",  "initHighlighted()");

addOnEvent("Survey_Unit",                        "create", "onCreateSurveyUnit()");

addOnEvent("Walker_Unit/Walker_Unit/N_A",     "click",  "redrawGridNa()");
addOnEvent("Walker_Unit/Walker_Unit/Ancient", "blur",   "redrawGridAncient()");
addOnEvent("Walker_Unit/Walker_Unit/Modern",  "blur",   "redrawGridModern()");




addOnEvent("Survey_Unit",                 "create", "initGridCache()");
addOnEvent("Survey_Unit",                 "fetch",  "updateGridCache()");
addOnEvent("Survey_Unit",                 "create", "updateGridWalkers()");
addOnEvent("Survey_Unit",                 "fetch",  "updateGridWalkers()");
addOnEvent("Walker",                      "save",   "updateGridWalkers()");

addOnEvent("Walker_Unit/Walker_Unit/Next_Survey_Unit", "click", "onClickNextSurveyUnit()");
