/******************************* CUSTOM SEARCH ********************************/
void removeWalkerUnitFromEntityTypesVar() {
  int idxToRemove = -1;

  for (int i = 0; i < entityTypes.size(); i++) {
    nameValuePair = entityTypes.get(i);
    if ("Walker Unit".equals(nameValuePair.getValue())) {
      idxToRemove = i;
      break;
    }
  }

  if (idxToRemove == -1)
    return;

  entityTypes.remove(idxToRemove);
}

void removeWalkerUnitFromEntityTypesList() {
  removeWalkerUnitFromEntityTypesVar();
  populateDropDown(getRefMatching("*/Search/Entity_Types"), entityTypes);
}

removeWalkerUnitFromEntityTypesList();

void search(){
  String tabgroup = "Control";
  String refEntityList  = tabgroup + "/Search/Entity_List";
  String refSearchTerm  = tabgroup + "/Search/Search_Term";
  String refEntityTypes = tabgroup + "/Search/Entity_Types";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String searchQuery = "SELECT uuid, response "+
                       "  FROM latestNonDeletedMaterialisedArchEntFormattedIdentifiers  "+
                       " WHERE uuid in (SELECT uuid "+
                       "                  FROM materialisedlatestnondeletedaentvalue "+
                       "                 WHERE measure LIKE {term}||'%' )"+
                       " AND ( aenttypename = {type} OR '' = {type} ) "+
                       " AND ( aenttypename != 'Walker Unit' ) "+
                       " ORDER BY substr(uuid, 7, 13) desc, response" +
                       " LIMIT ? "+
                       "OFFSET ? ";
  searchQuery = dbReplaceFirst(searchQuery, "{term}", term);
  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);
  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);

  drop1Q  = " drop table if exists materialisedlatestnondeletedaentvalue";

  make1Q  = " create table materialisedlatestnondeletedaentvalue as";
  make1Q += " select * from latestnondeletedaentvalue";

  drop2Q  = " drop table if exists latestNonDeletedMaterialisedArchEntFormattedIdentifiers";

  make2Q  = " create table if not exists latestNonDeletedMaterialisedArchEntFormattedIdentifiers as";
  make2Q += "   select uuid, aenttypeid, aenttypename, group_concat(response, '') as response, null as deleted";
  make2Q += "   from (";
  make2Q += "     select uuid, aenttypeid, aenttypename, group_concat(format(formatstring, vocabname, measure, freetext, certainty), appendcharacterstring) as response, null as deleted, aentcountorder";
  make2Q += "     from (";
  make2Q += "       select uuid, aenttypeid, aenttypename, formatstring, vocabname, measure, freetext, certainty, appendcharacterstring, null as deleted, aentcountorder, vocabcountorder, attributeid";
  make2Q += "       from latestNonDeletedArchent";
  make2Q += "         JOIN aenttype using (aenttypeid)";
  make2Q += "         JOIN (select * from idealaent where isIdentifier='true') using (aenttypeid)";
  make2Q += "         join attributekey  using (attributeid)";
  make2Q += "         join materialisedlatestnondeletedaentvalue using (uuid, attributeid)";
  make2Q += "         left outer join vocabulary using (attributeid, vocabid)";
  make2Q += "       order by uuid, aentcountorder, vocabcountorder";
  make2Q += "     )";
  make2Q += "     group by uuid, attributeid";
  make2Q += "     having response is not null";
  make2Q += "     order by uuid, aentcountorder)";
  make2Q += "   group by uuid";
  make2Q += "   order by uuid";

  doRegenQ  = "select matTS != avTS";
  doRegenQ += "  from (";
  doRegenQ += "        select max(valuetimestamp) as matTS";
  doRegenQ += "          from materialisedlatestnondeletedaentvalue),";
  doRegenQ += "               (select max(valuetimestamp) as avTS";
  doRegenQ += "               from aentvalue);";

  FetchCallback search = new FetchCallback() {
    onFetch(result) {
      Log.d("search", "" + result);
      populateCursorList(refEntityList, searchQuery, 25);
    }
    onError(message) {
      Log.d("search", "" + message);
      doRegen.onFetch(null);
    }
  };

  FetchCallback make2 = new FetchCallback() {
    onFetch(result) {
      Log.d("make2", "" + result);
      fetchOne(make2Q, search);
    }
    onError(message) {
      Log.d("make2", "" + message);
    }
  };

  FetchCallback drop2 = new FetchCallback() {
    onFetch(result) {
      Log.d("drop2", "" + result);
      fetchOne(drop2Q, make2);
    }
    onError(message) {
      Log.d("drop2", "" + message);
    }
  };

  FetchCallback make1 = new FetchCallback() {
    onFetch(result) {
      Log.d("make1", "" + result);
      fetchOne(make1Q, drop2);
    }
    onError(message) {
      Log.d("make1", "" + message);
    }
  };

  FetchCallback doRegen = new FetchCallback() {
    onFetch(result) {
      Log.d("asdfasdfasdfASDFASDFASDFADF", "0");
      if (result == null || result.size() == 0 || result.get(0) == null) {
        Log.d("null", "" + result);
        fetchOne(drop1Q, make1);
      } else if (result.get(0).equals("1")) {
        Log.d("equals 1", "" + result);
        fetchOne(drop1Q, make1);
      } else {
        Log.d("equals 0", "" + result);
        search.onFetch(null);
      }
    }
    onError(message) {
      Log.d("asdfasdfasdfASDFASDFASDFADfERORRR", "" + message);
      //fetchOne(drop1Q, make1);
    }
  };

  loadingResults(refEntityList);
  fetchOne(doRegenQ, doRegen);
  refreshTabgroupCSS(tabgroup);

  Log.d("Module", "Search query: " + searchQuery);
}

void initSearchResultList() {
  List l = new ArrayList();
  l.add(new NameValuePair("Tap 'Search' to update this list", ""));
  populateMenu("Control/Search/Entity_List", l);
}

void loadingResults(String ref) {
  List l = new ArrayList();
  l.add(new NameValuePair("Loading results...", ""));
  populateMenu(ref, l);
}

delOnEvent("Control/Search", "show", "search()");
delOnEvent("Control/Search/Entity_Types", "click" , "search()");
addOnEvent("Control/Search", "show", "initSearchResultList()");
