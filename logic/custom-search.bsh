/******************************* CUSTOM SEARCH ********************************/

final String SELECT_SAMPLE_TAKEN_REF_FULL = SEARCH_TAB_REF_FULL + "/Select_Sample_Taken";
final String SAMPLE_TAKEN_ATTRIBUTE_NAME = "Sample Taken";

void removeWalkerUnitFromEntityTypesVar() {
  int idxToRemove = -1;

  for (int i = 0; i < entityTypes.size(); i++) {
    nameValuePair = entityTypes.get(i);
    if (WALKER_UNIT_ENTITY_REF.equals(nameValuePair.getValue())) {
      idxToRemove = i;
      break;
    }
  }

  if (idxToRemove == -1)
    return;

  entityTypes.remove(idxToRemove);
}

void removeWalkerUnitFromEntityTypesList() {
  removeWalkerUnitFromEntityTypesVar();
  populateDropDown(getRefMatching("*/Search/Entity_Types"), entityTypes);
}

removeWalkerUnitFromEntityTypesList();

void populateSelectUser(){
  String refSearchUsers = SEARCH_TAB_REF_FULL + "/Select_User";
  String getNonDeletedUsersQuery = "SELECT userid, fname || ' ' || lname "+
                                   "  FROM user "+
                                   " WHERE userdeleted is null "+
                                   " UNION " +
                                   "SELECT -1, '{All}'";

  fetchAll(getNonDeletedUsersQuery, new FetchCallback() {
    onFetch(result) {
      populateDropDown(refSearchUsers, result, false);
      search();
    }
  });
}

void populateSelectDate() {
    String refSearchDate = SEARCH_TAB_REF_FULL + "/Select_Date";
    String getNonDeletedDateQuery = "select distinct measure as key, measure as value " +
									 "from materialisedlatestnondeletedaentvalue " +
									 "join attributekey using (attributeid) " +
									 "where attributename = 'Date' ";

	FetchCallback popDate = new FetchCallback() {
		onFetch(result) {
			  if (isNull(result)) {
  				result = new ArrayList();
        }
        // Add the All value to the list
        addAllToTopOfList(result);

			  // Populate dropdown
			  populateDropDown(refSearchDate, result, false);
			}
    onError(message) {
      Log.d("populateSelectDate callback", message);
    }
	};

  fetchAll(getNonDeletedDateQuery, popDate);
}

void search(){
  String tabgroup = "Control";
  String refEntityList  = tabgroup + "/Search/Entity_List";
  String refSearchTerm  = tabgroup + "/Search/Search_Term";
  String refEntityTypes = tabgroup + "/Search/Entity_Types";
  String refSelectUser  = tabgroup + "/Search/Select_User";

  String refSelectDate	= tabgroup + "/Search/Select_Date";
  String refSelectSampleTaken = SEARCH_TAB_REF_FULL + "/Select_Sample_Taken";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String user = getFieldValue(refSelectUser);
  String date = getFieldValue(refSelectDate);
  String sampleTaken = getFieldValue(refSelectSampleTaken);

  String searchQuery = "SELECT uuid, response " +
 					   " FROM latestNonDeletedMaterialisedArchEntFormattedIdentifiers "+
 					   " JOIN materialisedlatestnondeletedaentvalue USING (uuid) "+
 					   " JOIN attributekey USING (attributeid) "+
 					   " WHERE attributename = 'Date' "+
 					   " AND ( measure = '{date}' OR '' = '{date}' ) "+
             " AND uuid in (SELECT uuid " +
             "                  FROM materialisedlatestnondeletedaentvalue "+
             "                 WHERE vocabid ='{sampleTaken}' OR '' = '{sampleTaken}') "+
             " AND uuid in (SELECT uuid " +
             "                  FROM materialisedlatestnondeletedaentvalue "+
             "                 WHERE measure LIKE {term} || '%') "+
             " AND ( aenttypename = {type} OR '' = {type} ) "+
             " AND ( aenttypename != '{walkerUnit}' ) "+
             " AND ( latestNonDeletedMaterialisedArchEntFormattedIdentifiers.userid = {user} "+
					   "			 OR -1 = {user}) "+
             " ORDER BY substr(uuid, 7, 13) DESC, response"+
             " LIMIT ? "+
             "OFFSET ? ";

  searchQuery = dbReplaceFirst(searchQuery, "{term}", term);

  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);
  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);

  searchQuery = replaceFirst(searchQuery,   "{user}", user);
  searchQuery = replaceFirst(searchQuery,   "{user}", user);

  searchQuery = replaceFirst(searchQuery,   "{date}", date);
  searchQuery = replaceFirst(searchQuery,   "{date}", date);

  searchQuery = replaceFirst(searchQuery, "{walkerUnit}", WALKER_UNIT_ENTITY_REF);

  searchQuery = replaceFirst(searchQuery, "{sampleTaken}", sampleTaken);
  searchQuery = replaceFirst(searchQuery, "{sampleTaken}", sampleTaken);

  drop1Q  = " drop table if exists materialisedlatestnondeletedaentvalue";

  make1Q  = " create table materialisedlatestnondeletedaentvalue as";
  make1Q += " select * from latestnondeletedaentvalue";

  drop2Q  = " drop table if exists latestNonDeletedMaterialisedArchEntFormattedIdentifiers";

  make2Q  = " create table if not exists latestNonDeletedMaterialisedArchEntFormattedIdentifiers as";
  make2Q += "   select uuid, aenttypeid, aenttypename, group_concat(response, '') as response, null as deleted, userid";
  make2Q += "   from (";
  make2Q += "     select uuid, aenttypeid, aenttypename, group_concat(format(formatstring, vocabname, measure, freetext, certainty), appendcharacterstring) as response, null as deleted, aentcountorder, userid";
  make2Q += "     from (";
  make2Q += "       select uuid, aenttypeid, aenttypename, formatstring, vocabname, measure, freetext, certainty, appendcharacterstring, null as deleted, aentcountorder, vocabcountorder, attributeid, latestNonDeletedArchent.userid";
  make2Q += "       from latestNonDeletedArchent";
  make2Q += "         JOIN aenttype using (aenttypeid)";
  make2Q += "         JOIN (select * from idealaent where isIdentifier='true') using (aenttypeid)";
  make2Q += "         join attributekey  using (attributeid)";
  make2Q += "         join materialisedlatestnondeletedaentvalue using (uuid, attributeid)";
  make2Q += "         left outer join vocabulary using (attributeid, vocabid)";
  make2Q += "       order by uuid, aentcountorder, vocabcountorder";
  make2Q += "     )";
  make2Q += "     group by uuid, attributeid";
  make2Q += "     having response is not null";
  make2Q += "     order by uuid, aentcountorder)";
  make2Q += "   group by uuid";
  make2Q += "   order by uuid";

  doRegenQ  = "select matTS != avTS";
  doRegenQ += "  from (";
  doRegenQ += "        select max(valuetimestamp) as matTS";
  doRegenQ += "          from materialisedlatestnondeletedaentvalue),";
  doRegenQ += "               (select max(valuetimestamp) as avTS";
  doRegenQ += "               from aentvalue);";

  FetchCallback search = new FetchCallback() {
    onFetch(result) {
      Log.d("search", "" + result);
      populateCursorList(refEntityList, searchQuery, 25);
    }
    onError(message) {
      Log.d("search", "" + message);
      doRegen.onFetch(null);
    }
  };

  FetchCallback make2 = new FetchCallback() {
    onFetch(result) {
      Log.d("make2", "" + result);
      fetchOne(make2Q, search);
    }
    onError(message) {
      Log.d("make2", "" + message);
    }
  };

  FetchCallback drop2 = new FetchCallback() {
    onFetch(result) {
      Log.d("drop2", "" + result);
      fetchOne(drop2Q, make2);
    }
    onError(message) {
      Log.d("drop2", "" + message);
    }
  };

  FetchCallback make1 = new FetchCallback() {
    onFetch(result) {
      Log.d("make1", "" + result);
      fetchOne(make1Q, drop2);
    }
    onError(message) {
      Log.d("make1", "" + message);
    }
  };

  FetchCallback doRegen = new FetchCallback() {
    onFetch(result) {
      Log.d("asdfasdfasdfASDFASDFASDFADF", "0");
      if (result == null || result.size() == 0 || result.get(0) == null) {
        Log.d("null", "" + result);
        fetchOne(drop1Q, make1);
      } else if (result.get(0).equals("1")) {
        Log.d("equals 1", "" + result);
        fetchOne(drop1Q, make1);
      } else {
        Log.d("equals 0", "" + result);
        search.onFetch(null);
      }
    }
    onError(message) {
      Log.d("search", "" + message);
      //fetchOne(drop1Q, make1);
    }
  };

  loadingResults(refEntityList);
  fetchOne(doRegenQ, doRegen);
  refreshTabgroupCSS(tabgroup);

  Log.d("Module", "Search query: " + searchQuery);
}

void initSearchResultList() {
  List l = new ArrayList();
  l.add(new NameValuePair("Tap 'Search' to update this list", ""));
  populateMenu(SEARCH_TAB_REF_FULL + "/Entity_List", l);
}

void loadingResults(String ref) {
  List l = new ArrayList();
  l.add(new NameValuePair("Loading results...", ""));
  populateMenu(ref, l);
}

// Populate the dropdown with path `ref` with the values of the vocabulary `vocab`
void setDropdownByVocab(String vocabName, String ref, boolean hasNull, boolean includeAll) {
  fetchAll("select vocabid as key, vocabname as value from vocabulary left join "+
      "attributekey using (attributeid) where attributename = '" + vocabName + "';",
    new FetchCallback() {
      onFetch(result) {
        if (isNull(result)) {
          result = new ArrayList();
        }

        if (includeAll) {
          addAllToTopOfList(result);
        }

        populateDropDown(ref, result, hasNull);
      }
  });
}

void addAllToTopOfList(List list) {
  // Add the option 'All' at the top of the list
  List all = new ArrayList();
  all.add("");
  all.add("{All}");

  list.add(0, all);
}

final String SET_DROPDOWN_FOR_SAMPLE_TAKEN_STATEMENT = "setDropdownByVocab("+
  "SAMPLE_TAKEN_ATTRIBUTE_NAME, SELECT_SAMPLE_TAKEN_REF_FULL, false, true)";

delOnEvent(SEARCH_TAB_REF_FULL, "show", "search()");
delOnEvent(SEARCH_TAB_REF_FULL + "/Entity_Types", "click" , "search()");

addOnEvent(SEARCH_TAB_REF_FULL, "show", "initSearchResultList()");
addOnEvent(SEARCH_TAB_REF_FULL, "show", "populateSelectUser()");
addOnEvent(SEARCH_TAB_REF_FULL, "show", "populateSelectDate()");
addOnEvent(SEARCH_TAB_REF_FULL, "show", SET_DROPDOWN_FOR_SAMPLE_TAKEN_STATEMENT);
